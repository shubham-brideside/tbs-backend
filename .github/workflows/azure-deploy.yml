name: Deploy to Azure App Service

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AZURE_WEBAPP_NAME: brideside-backend
  AZURE_RESOURCE_GROUP: brideside-rg
  AZURE_CONTAINER_REGISTRY: brideside
  JAVA_VERSION: '21'
  PACKAGE_NAME: backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    
    - name: 'Set up JDK ${{ env.JAVA_VERSION }}'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 'Cache Maven packages'
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-
    
    - name: 'Build with Maven'
      run: mvn clean package -DskipTests
    
    - name: 'Run Tests'
      run: mvn test
    
    - name: 'Azure Login'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AZURE_HTTP_USER_AGENT: true
    
    - name: 'Login to Azure Container Registry'
      run: |
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
    
    - name: 'Build and push Docker image'
      run: |
        # Build Docker image with commit SHA as tag
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/brideside-backend:${{ github.sha }} .
        docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/brideside-backend:latest .
        
        # Push both tagged images
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/brideside-backend:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/brideside-backend:latest
    
    - name: 'Deploy to Azure App Service'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE }}
        images: '${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/brideside-backend:${{ github.sha }}'
    
    - name: 'Verify deployment'
      run: |
        # Wait for deployment to complete
        sleep 60
        
        # Get app URL
        APP_URL=$(az webapp show --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --query defaultHostName --output tsv)
        
        # Test health endpoint
        curl -f "https://$APP_URL/actuator/health" || exit 1
        
        echo "Deployment successful! App URL: https://$APP_URL"
        echo "Swagger UI: https://$APP_URL/swagger-ui.html"

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4
    
    - name: 'Set up JDK ${{ env.JAVA_VERSION }}'
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 'Run OWASP Dependency Check'
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'brideside-backend'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
