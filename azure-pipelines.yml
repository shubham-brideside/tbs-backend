# Azure DevOps Pipeline for Brideside Backend
# Deploy to Azure App Service using Docker containers

trigger:
- main
- master

variables:
  azureSubscription: 'your-azure-subscription-connection'
  appName: 'brideside-backend'
  resourceGroup: 'brideside-rg'
  containerRegistry: 'brideside'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  imageRepository: 'brideside-backend'
  containerRegistry: 'brideside'
  dockerRegistryServiceConnection: 'your-docker-registry-connection'
  vmImageName: 'ubuntu-latest'
  javaVersion: '21'

stages:
- stage: Build
  displayName: Build and test stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: $(javaVersion)
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.$(javaVersion)'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package'
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        testRunTitle: 'Publish test results for Java $(javaVersion)'
    
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/target/site/cobertura/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/target/site/cobertura'

- stage: BuildAndPush
  displayName: Build and push Docker image
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: BuildAndPush
    displayName: Build and push
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  displayName: Deploy stage
  dependsOn: BuildAndPush
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: 'production'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebAppContainer@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(appName)
              containers: $(containerRegistry).azurecr.io/$(imageRepository):$(Build.BuildId)
          
          - task: AzureCLI@2
            displayName: 'Verify deployment'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Waiting for deployment to complete..."
                sleep 60
                
                echo "Testing health endpoint..."
                APP_URL=$(az webapp show --name $(appName) --resource-group $(resourceGroup) --query defaultHostName --output tsv)
                
                # Test health endpoint
                curl -f "https://$APP_URL/actuator/health" || exit 1
                
                echo "Deployment successful!"
                echo "App URL: https://$APP_URL"
                echo "Swagger UI: https://$APP_URL/swagger-ui.html"
